// ---------- Generators & Datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum RoomStatus {
  AVAILABLE
  UNAVAILABLE
}

enum BookingStatus {
  AWAITING_ATTENDEE_CONFIRM
  AWAITING_ADMIN_APPROVAL
  APPROVED
  REJECTED
  CANCELLED
}

enum InviteStatus {
  INVITED
  ACCEPTED
  DECLINED
}

enum NoteQueueStatus {
  INVITED
  ACCEPTED
  DECLINED
  REPLACED
}

enum ServiceCategory {
  IT
  HOUSEKEEPING
  NOTETAKING
}

enum ServiceStatus {
  PENDING
  IN_PROGRESS
  CONFIRMED
  COMPLETED
  REJECTED
}

/** ✅ Notifications */
enum NotifType {
  INVITE
  APPROVED
  REJECTED
  CANCELED
  RESCHEDULED
  ISSUE_CREATED
}

enum RefType {
  BOOKING
  INVITE
  ISSUE
}

/** ✅ ใหม่: สถานะงานแม่บ้าน */
enum HousekeepingTaskStatus {
  PENDING
  IN_PROGRESS
  DONE
  CANCELLED
}

// ---------- Master Data ----------
model Department {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  positions Position[]
  services  Service[]
}

model Position {
  id                 Int         @id @default(autoincrement())
  name               String      @unique
  isAdmin            Boolean     @default(false)
  isNoteManager      Boolean     @default(false)
  isNoteTaker        Boolean     @default(false)
  isHousekeeper      Boolean     @default(false)
  isHousekeepingLead Boolean     @default(false)
  description        String?
  departmentId       Int?
  department         Department? @relation(fields: [departmentId], references: [id])

  users    User[]
  neededBy BookingRequiredPosition[]
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  passwordHash String
  fullName     String
  email        String?  @unique
  positionId   Int
  position     Position @relation(fields: [positionId], references: [id])
  createdAt    DateTime @default(now())

  bookingsBooked Booking[] @relation("BookedBy")
  bookingInvites BookingInvite[]
  noteTakerAssigns BookingNoteTaker[]
  notifications Notification[] @relation("UserNotifications")

  // one-to-one กับคิว
  noteTakerQueue NoteTakerQueue?

  // ใบลาคนจด
  noteTakerLeaves NoteTakerLeave[] @relation("UserNoteTakerLeaves")

  // งานแม่บ้านที่ถูกมอบหมาย (optional)
  housekeepingTasks HousekeepingTask[] @relation("HousekeepingAssignee")
}

// ---------- Rooms & Bookings ----------
model MeetingRoom {
  id       Int        @id @default(autoincrement())
  roomName String     @unique
  capacity Int
  status   RoomStatus @default(AVAILABLE)

  bookings Booking[]
}

model Booking {
  id     Int         @id @default(autoincrement())
  roomId Int
  room   MeetingRoom @relation(fields: [roomId], references: [id])

  bookedById Int
  bookedBy   User @relation("BookedBy", fields: [bookedById], references: [id])

  startTime DateTime
  endTime   DateTime
  status    BookingStatus @default(AWAITING_ATTENDEE_CONFIRM)

  purpose   String?
  createdAt DateTime @default(now())

  requiredPositions BookingRequiredPosition[]
  invites           BookingInvite[]
  noteTakers        BookingNoteTaker[]

  // ตัวเลือกเสริม (ส่งไปยังฝ่ายที่รับผิดชอบ)
  services          BookingService[]

  // งานแม่บ้านที่สร้างจากบริการ
  housekeepingTasks HousekeepingTask[]
}

model BookingRequiredPosition {
  id         Int @id @default(autoincrement())
  bookingId  Int
  positionId Int

  booking  Booking  @relation(fields: [bookingId], references: [id])
  position Position @relation(fields: [positionId], references: [id])

  @@index([bookingId])
  @@index([positionId])
}

model BookingInvite {
  id          Int          @id @default(autoincrement())
  bookingId   Int
  userId      Int
  status      InviteStatus @default(INVITED)
  respondedAt DateTime?

  booking Booking @relation(fields: [bookingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([bookingId, userId])
  @@index([userId])
  @@index([bookingId, status])
}

model BookingNoteTaker {
  id        Int             @id @default(autoincrement())
  bookingId Int
  userId    Int
  roleIndex Int
  status    NoteQueueStatus @default(INVITED)

  booking Booking @relation(fields: [bookingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([bookingId, userId])
  @@index([userId])
  @@index([bookingId, status])
}

model NoteTakerQueue {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  user     User    @relation(fields: [userId], references: [id])
  orderNo  Int
  isActive Boolean @default(true)

  @@index([isActive, orderNo])
}

// ---------- Services / Options ----------
model Service {
  id           Int             @id @default(autoincrement())
  name         String          @unique // เช่น "Coffee & Drinks", "Lunch"
  category     ServiceCategory
  departmentId Int?
  department   Department?     @relation(fields: [departmentId], references: [id])

  requiresApproval Boolean @default(false)

  bookingUsages BookingService[]
  housekeepingTasks HousekeepingTask[]
}

model BookingService {
  id        Int           @id @default(autoincrement())
  bookingId Int
  serviceId Int
  quantity  Int?
  status    ServiceStatus @default(PENDING)

  booking Booking @relation(fields: [bookingId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@index([bookingId])
  @@index([serviceId, status])
}

// ---------- Notifications ----------
model Notification {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation("UserNotifications", fields: [userId], references: [id])

  type    NotifType
  title   String
  message String

  refType RefType?
  refId   Int?

  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  readAt    DateTime?

  @@index([userId, isRead, createdAt])
}

model NoteTakerLeave {
  id        Int      @id @default(autoincrement())
  userId    Int
  date      DateTime
  reason    String?
  createdAt DateTime @default(now())

  user User @relation("UserNoteTakerLeaves", fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([userId, date])
}

/** ✅ ใหม่: งานแม่บ้าน สร้างจากบริการของการจอง */
model HousekeepingTask {
  id            Int                     @id @default(autoincrement())
  bookingId     Int
  serviceId     Int                      // ชี้ไปที่ Service (เช่น Coffee & Drinks / Lunch)
  status        HousekeepingTaskStatus   @default(PENDING)
  assignedToId  Int?
  note          String?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt

  booking       Booking                  @relation(fields: [bookingId], references: [id])
  service       Service                  @relation(fields: [serviceId], references: [id])

  // ผู้รับผิดชอบ (แม่บ้าน) — optional
  assignedTo    User?                    @relation("HousekeepingAssignee", fields: [assignedToId], references: [id])

  @@unique([bookingId, serviceId])       // booking เดียว ต่อ service ชิ้นเดียว = งานเดียว
  @@index([status])
  @@index([assignedToId])
  @@index([bookingId])
  @@index([serviceId])
}
