// ---------- Generators & Datasource ----------
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------


enum RoomStatus {
  AVAILABLE
  UNAVAILABLE
}

enum BookingStatus {
  // หลังสร้างการจอง: รอผู้เข้าร่วม (ตามตำแหน่ง) กดยืนยัน
  AWAITING_ATTENDEE_CONFIRM   // รอการยืนยันเข้าร่วมจากพนักงานตามตำแหน่ง
  AWAITING_ADMIN_APPROVAL     // ผู้จองเลือกตำแหน่งแล้ว/ยืนยันครบ ส่งต่อให้แอดมินอนุมัติ
  APPROVED
  REJECTED
  CANCELLED
}

enum InviteStatus {
  INVITED
  ACCEPTED
  DECLINED
}

enum NoteQueueStatus {
  INVITED
  ACCEPTED
  DECLINED
  REPLACED
}

enum ServiceCategory {
  IT
  HOUSEKEEPING
  NOTETAKING
}

enum ServiceStatus {
  PENDING        // สร้างคำขอแล้ว
  IN_PROGRESS    // แผนกรับทราบและกำลังจัดการ
  CONFIRMED      // ยืนยันเรียบร้อย (พร้อมใช้งาน)
  COMPLETED      // ปิดงานหลังประชุมจบ
  REJECTED
}

// ---------- Master Data ----------
model Department {
  id       Int      @id @default(autoincrement())
  name     String   @unique   // เช่น IT, Housekeeping, NoteTaking
  positions Position[]
  services  Service[]
}

model Position {
  id           Int       @id @default(autoincrement())
  name         String    @unique    // เช่น Admin, Manager, Staff, NoteTaker
  // กำหนดตำแหน่งที่เป็นแอดมิน เพื่อใช้อนุมัติการจอง/ดูแลระบบ
  isAdmin      Boolean   @default(false)
  // เป็นตำแหน่ง “จดประชุม” (ใช้กับคิวจดประชุม)
  isNoteTaker  Boolean   @default(false)
  description  String?
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])

  users        User[]
  neededBy     BookingRequiredPosition[]
}

model User {
  id             Int              @id @default(autoincrement())
  username       String           @unique
  passwordHash   String
  fullName       String
  email          String?          @unique
  positionId     Int
  position       Position         @relation(fields: [positionId], references: [id])
  createdAt      DateTime         @default(now())

  // ผู้จอง
  bookingsBooked Booking[]        @relation("BookedBy")

  // คำเชิญเข้าร่วม (จากตำแหน่ง → รายบุคคล)
  bookingInvites BookingInvite[]

  // ถูก assign ให้จดประชุม
  noteTakerAssigns BookingNoteTaker[]

  // ✅ ตั้งชื่อ relation ให้ชัดเจน
  notifications   Notification[]  @relation("UserNotifications")

  noteTakerQueues  NoteTakerQueue[]
}

// ---------- Rooms & Bookings ----------
model MeetingRoom {
  id        Int        @id @default(autoincrement())
  roomName  String     @unique
  capacity  Int        // ขนาดห้องเก็บเป็นตัวเลข เช่น 30, 50, 100 หรือค่าอื่นๆ ได้เลย
  status    RoomStatus @default(AVAILABLE)

  bookings  Booking[]
}


model Booking {
  id           Int            @id @default(autoincrement())
  roomId       Int
  room         MeetingRoom    @relation(fields: [roomId], references: [id])

  bookedById   Int
  bookedBy     User           @relation("BookedBy", fields: [bookedById], references: [id])

  startTime    DateTime
  endTime      DateTime
  status       BookingStatus  @default(AWAITING_ATTENDEE_CONFIRM)

  purpose      String?        // วัตถุประสงค์ (ถ้ามี)
  createdAt    DateTime       @default(now())

  // ข้อ 3: ระบุตำแหน่งงานที่ต้องเข้าร่วมประชุม
  requiredPositions BookingRequiredPosition[]

  // คำเชิญรายบุคคล (สร้างอัตโนมัติจากตำแหน่งที่ถูกเลือก)
  invites       BookingInvite[]

  // ฝ่ายจดประชุม: ต้องมี 2 คน/การประชุม (เลือก/จัดคิวโดยหัวหน้าฝ่าย)
  noteTakers    BookingNoteTaker[]

  // ตัวเลือกเสริม (ส่งไปยังฝ่ายที่รับผิดชอบ)
  services      BookingService[]
}

// ตำแหน่งที่ “ต้องเข้าร่วม” (ผู้จองเลือกเป็นตำแหน่ง ไม่ใช่รายบุคคล)
model BookingRequiredPosition {
  id         Int      @id @default(autoincrement())
  bookingId  Int
  positionId Int

  booking    Booking  @relation(fields: [bookingId], references: [id])
  position   Position @relation(fields: [positionId], references: [id])
}

// คำเชิญ “รายบุคคล” ที่ระบบสร้างให้กับ “พนักงานทุกคนในตำแหน่งที่ถูกเลือก” เพื่อกดยืนยัน
model BookingInvite {
  id         Int          @id @default(autoincrement())
  bookingId  Int
  userId     Int
  status     InviteStatus @default(INVITED)
  respondedAt DateTime?

  booking    Booking      @relation(fields: [bookingId], references: [id])
  user       User         @relation(fields: [userId], references: [id])

  @@unique([bookingId, userId])
}

// ผู้จดประชุม 2 คน/การประชุม (มาจากคิวของฝ่ายจดประชุม แต่หัวหน้าฝ่ายสามารถแก้ได้)
model BookingNoteTaker {
  id         Int             @id @default(autoincrement())
  bookingId  Int
  userId     Int
  roleIndex  Int             // 1,2 = หลัก ; 3,4 = สำรอง (ถ้าใช้)
  status     NoteQueueStatus @default(INVITED)

  booking    Booking         @relation(fields: [bookingId], references: [id])
  user       User            @relation(fields: [userId], references: [id])

  @@unique([bookingId, userId])
}

// (ออปชั่น) คิวกลางของฝ่ายจดประชุม (หัวหน้าฝ่ายจัดลำดับไว้ล่วงหน้า)
model NoteTakerQueue {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  orderNo   Int
  isActive  Boolean  @default(true)
}

// ---------- Services / Options ----------
model Service {
  id           Int            @id @default(autoincrement())
  name         String         @unique// เช่น โปรเจคเตอร์, ระบบเสียง, กาแฟ/เครื่องดื่ม, จดประชุม
  category     ServiceCategory
  departmentId Int?           // แผนกที่รับผิดชอบ เช่น IT, Housekeeping, NoteTaking
  department   Department?    @relation(fields: [departmentId], references: [id])

  requiresApproval Boolean    @default(false) // เช่น IT อาจต้อง confirm ความพร้อมอุปกรณ์

  bookingUsages  BookingService[]
}

model BookingService {
  id         Int           @id @default(autoincrement())
  bookingId  Int
  serviceId  Int
  quantity   Int?          // เช่น กาแฟกี่แก้ว
  status     ServiceStatus @default(PENDING)
  // มอบหมายต่อให้หัวหน้าแผนกที่เกี่ยวข้องในภายหลังผ่านแอป/แดชบอร์ด

  booking    Booking       @relation(fields: [bookingId], references: [id])
  service    Service       @relation(fields: [serviceId], references: [id])
}

// ---------- Notifications ----------
model Notification {
  id        Int       @id @default(autoincrement())
  userId    Int
  // ✅ ตั้งชื่อ relation ให้ตรงกับฝั่ง User และระบุ onDelete เพื่อล้างแจ้งเตือนเมื่อผู้ใช้ถูกลบ
  user      User      @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  message   String
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())

  // ✅ ช่วย query เร็วขึ้น
  @@index([userId])
}
